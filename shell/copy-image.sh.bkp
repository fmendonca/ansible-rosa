#!/bin/bash
set -euo pipefail

SRC_KUBECONFIG="${SRC_KUBECONFIG:?Defina SRC_KUBECONFIG}"
DST_KUBECONFIG="${DST_KUBECONFIG:?Defina DST_KUBECONFIG}"
PROJETOS_TXT="../files/projects.txt"
SA_NAME="image-uploader"

REG_SRC=$(oc --kubeconfig="$SRC_KUBECONFIG" get route default-route -n openshift-image-registry --template='{{ .spec.host }}')
REG_DST=$(oc --kubeconfig="$DST_KUBECONFIG" get route default-route -n openshift-image-registry --template='{{ .spec.host }}')

while read -r projeto || [[ -n "$projeto" ]]; do
  echo "📦 Projeto: $projeto"

  if ! oc --kubeconfig="$DST_KUBECONFIG" get project "$projeto" &>/dev/null; then
    echo "➕ Criando projeto no destino: $projeto"
    oc --kubeconfig="$DST_KUBECONFIG" new-project "$projeto" >/dev/null
  fi

  for CLUSTER in origem destino; do
    if [[ "$CLUSTER" == "origem" ]]; then
      KCFG="$SRC_KUBECONFIG"
      ROLE="system:image-puller"
    else
      KCFG="$DST_KUBECONFIG"
      ROLE="system:image-builder"
    fi

    echo "👤 Garantindo SA $SA_NAME no $CLUSTER..."
    if ! oc --kubeconfig="$KCFG" -n "$projeto" get sa "$SA_NAME" &>/dev/null; then
      oc --kubeconfig="$KCFG" -n "$projeto" create sa "$SA_NAME"
    fi

    for i in {1..5}; do
      if oc --kubeconfig="$KCFG" -n "$projeto" get sa "$SA_NAME" &>/dev/null; then
        break
      fi
      echo "⏳ Aguardando SA $SA_NAME estar disponível no $CLUSTER..."
      sleep 1
    done

    echo "🔐 Garantindo permissão $ROLE no $CLUSTER..."
    oc --kubeconfig="$KCFG" -n "$projeto" policy add-role-to-user "$ROLE" -z "$SA_NAME" >/dev/null
  done

  echo "🔐 Gerando token da SA $SA_NAME no cluster origem..."
  SRC_TOKEN=$(oc --kubeconfig="$SRC_KUBECONFIG" -n "$projeto" create token "$SA_NAME" --duration=15m || true)
  echo "🔐 Gerando token da SA $SA_NAME no cluster destino..."
  DST_TOKEN=$(oc --kubeconfig="$DST_KUBECONFIG" -n "$projeto" create token "$SA_NAME" --duration=15m || true)

  if [[ -z "$SRC_TOKEN" || -z "$DST_TOKEN" ]]; then
    echo "❌ Falha ao obter tokens no projeto $projeto. Pulando..."
    continue
  fi

  SRC_AUTH="/tmp/podman-auth-src.json"
  DST_AUTH="/tmp/podman-auth-dst.json"

  echo "🔐 Login no registry origem via podman..."
  if ! podman login "$REG_SRC" -u "$SA_NAME" -p "$SRC_TOKEN" --authfile "$SRC_AUTH"; then
    echo "❌ Falha no login de origem com podman. Pulando..."
    continue
  fi

  echo "🔐 Login no registry destino via podman..."
  if ! podman login "$REG_DST" -u "$SA_NAME" -p "$DST_TOKEN" --authfile "$DST_AUTH"; then
    echo "❌ Falha no login de destino com podman. Pulando..."
    continue
  fi

  IS_JSON=$(oc --kubeconfig="$SRC_KUBECONFIG" get is -n "$projeto" -o json || true)

  if ! echo "$IS_JSON" | jq -e '.items | length > 0' >/dev/null; then
    echo "⚠️  Nenhum ImageStream encontrado no projeto $projeto, ignorando."
    continue
  fi

  echo "$IS_JSON" | jq -c '.items[]' | while read -r is_entry; do
    is_name=$(echo "$is_entry" | jq -r '.metadata.name')
    tags=$(echo "$is_entry" | jq -r '.status.tags // [] | .[].tag')

    if [[ -z "$tags" ]]; then
      echo "⚠️  ImageStream $is_name no projeto $projeto não possui tags, ignorando."
      continue
    fi

    for tag in $tags; do
      echo "🔄 Migrando imagem $is_name:$tag do projeto $projeto"

      SRC_IMAGE="$REG_SRC/$projeto/$is_name:$tag"
      DST_IMAGE="$REG_DST/$projeto/$is_name:$tag"

      echo "📥 Baixando $SRC_IMAGE"
      if ! REGISTRY_AUTH_FILE="$SRC_AUTH" podman pull "$SRC_IMAGE"; then
        echo "❌ Falha ao puxar imagem de origem."
        continue
      fi

      echo "🏷️  Retag para $DST_IMAGE"
      podman tag "$SRC_IMAGE" "$DST_IMAGE"

      echo "📤 Enviando para destino..."
      if ! REGISTRY_AUTH_FILE="$DST_AUTH" podman push "$DST_IMAGE"; then
        echo "❌ Falha ao enviar imagem para destino."
      fi

      # Limpa local
      podman rmi "$SRC_IMAGE" "$DST_IMAGE" >/dev/null || true
    done
  done

done < "$PROJETOS_TXT"

rm -f /tmp/podman-auth-src.json /tmp/podman-auth-dst.json

echo "✅ Migração de imagens concluída com sucesso!"
