- name: Exportar imagens e recursos OpenShift para AWS
  hosts: localhost
  gather_facts: false
  vars:
    ecr_secret_name: "ecr-secret"
    tmp_dir: "/tmp/openshift-export"

  tasks:
    - name: Obter ID da conta AWS
      command: aws sts get-caller-identity --query Account --output text
      register: aws_account_id
      changed_when: false

    - name: Obter região configurada
      command: aws configure get region
      register: aws_region
      changed_when: false

    - name: Montar URL do ECR
      set_fact:
        ecr_url: "{{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region.stdout }}.amazonaws.com"

    - name: Definir nome único do bucket S3
      set_fact:
        s3_bucket: "openshift-backup-{{ aws_account_id.stdout }}-{{ aws_region.stdout }}"

    - name: Ler projetos do arquivo
      slurp:
        src: ../files/projects.txt
      register: projects_file

    - name: Extrair lista de projetos
      set_fact:
        projects: "{{ projects_file['content'] | b64decode | split('\n') | select('match', '.+') | list }}"

    - name: Criar diretório temporário
      file:
        path: "{{ tmp_dir }}"
        state: directory

    - name: Verificar se bucket S3 existe
      shell: aws s3api head-bucket --bucket {{ s3_bucket }}
      register: s3_check
      failed_when: false
      changed_when: false

    - name: Criar bucket S3 se não existir
      shell: aws s3 mb s3://{{ s3_bucket }}
      when: s3_check.rc != 0

    - name: Obter token do ECR
      command: aws ecr get-login-password
      register: ecr_token
      changed_when: false

    - name: Login no ECR com podman
      shell: |
        echo "{{ ecr_token.stdout }}" | podman login --username AWS --password-stdin {{ ecr_url }}
      changed_when: false

    - name: Criar Secret para acesso ao ECR no OpenShift
      shell: |
        oc create secret docker-registry {{ ecr_secret_name }} \
          --docker-server={{ ecr_url }} \
          --docker-username=AWS \
          --docker-password="{{ ecr_token.stdout }}" \
          --docker-email=no-reply@example.com \
          --dry-run=client -o yaml | oc apply -f -
      changed_when: true

    - name: Associar secret à SA default de cada projeto
      shell: |
        oc patch serviceaccount default -n {{ item }} \
          -p '{"imagePullSecrets":[{"name":"{{ ecr_secret_name }}"}]}'
      loop: "{{ projects }}"
      changed_when: false
      ignore_errors: true

    - name: Criar diretório por projeto
      file:
        path: "{{ tmp_dir }}/{{ item }}"
        state: directory
      loop: "{{ projects }}"

    - name: Espelhar imagens com oc image mirror para o ECR
      shell: |
        for image in $(oc get is -n {{ item }} -o json | jq -r '.items[].status.tags[].items[].dockerImageReference'); do
          digest=$(echo "$image" | awk -F@ '{print $2}')
          img_name=$(basename $(echo "$image" | awk -F@ '{print $1}'))
          dest_image="{{ ecr_url }}/{{ item }}/$img_name:$digest"
          echo "Espelhando $image -> $dest_image"
          oc image mirror "$image" "$dest_image"
        done
      args:
        executable: /bin/bash
      loop: "{{ projects }}"

    - name: Exportar objetos do OpenShift
      shell: |
        for kind in deployment configmap secret serviceaccount service route; do
          oc get $kind -n {{ item }} -o yaml > {{ tmp_dir }}/{{ item }}/$kind.yaml || true
        done
      args:
        executable: /bin/bash
      loop: "{{ projects }}"

    - name: Atualizar imagem dos deployments com ECR
      replace:
        path: "{{ tmp_dir }}/{{ item }}/deployment.yaml"
        regexp: 'image: .*/(.*)'
        replace: 'image: {{ ecr_url }}/{{ item }}/\1'
      when: lookup('file', tmp_dir + '/' + item + '/deployment.yaml', errors='ignore') != ''
      loop: "{{ projects }}"

    - name: Enviar arquivos para o S3
      shell: |
        aws s3 cp {{ tmp_dir }}/{{ item }} s3://{{ s3_bucket }}/{{ item }} --recursive
      args:
        executable: /bin/bash
      loop: "{{ projects }}"
