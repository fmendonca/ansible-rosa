- name: Associar o secret à SA default
  shell: |
    oc patch serviceaccount default -n {{ project }} \
      -p '{"imagePullSecrets":[{"name":"{{ ecr_secret_name }}"}]}'
  changed_when: false
  ignore_errors: true

- name: Criar diretório do projeto
  file:
    path: "{{ tmp_dir }}/{{ project }}"
    state: directory

- name: Exportar imagens do ImageStream para o ECR
  shell: |
    for image in $(oc get is -n {{ project }} -o jsonpath='{.items[*].status.tags[*].items[*].dockerImageReference}'); do
      img_name=$(basename "$image")
      new_image="{{ ecr_url }}/{{ project }}/$img_name"
      echo "Copiando $image para $new_image"
      skopeo copy --src-tls-verify=false --dest-tls-verify=true docker://$image docker://$new_image
    done
  args:
    executable: /bin/bash

- name: Exportar objetos OpenShift
  shell: |
    for kind in deployment configmap secret serviceaccount service route; do
      oc get $kind -n {{ project }} -o yaml > {{ tmp_dir }}/{{ project }}/$kind.yaml || true
    done
  args:
    executable: /bin/bash

- name: Atualizar imagem dos deployments com ECR
  replace:
    path: "{{ tmp_dir }}/{{ project }}/deployment.yaml"
    regexp: 'image: .*/(.*)'
    replace: 'image: {{ ecr_url }}/{{ project }}/\1'
  when: lookup('file', tmp_dir + '/' + project + '/deployment.yaml', errors='ignore') != ''

- name: Enviar arquivos para o S3
  shell: |
    aws s3 cp {{ tmp_dir }}/{{ project }} s3://{{ s3_bucket }}/{{ project }} --recursive
  args:
    executable: /bin/bash
