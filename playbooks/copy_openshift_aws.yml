- name: Exportar imagens e recursos OpenShift para AWS
  hosts: localhost
  gather_facts: false
  vars:
    s3_bucket: "openshift-backup"
    ecr_secret_name: "ecr-secret"
    tmp_dir: "/tmp/openshift-export"

  tasks:
    - name: Obter ID da conta AWS
      command: aws sts get-caller-identity --query Account --output text
      register: aws_account_id
      changed_when: false

    - name: Obter região configurada
      command: aws configure get region
      register: aws_region
      changed_when: false

    - name: Montar URL do ECR
      set_fact:
        ecr_url: "{{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region.stdout }}.amazonaws.com"

    - name: Ler projetos do arquivo
      slurp:
        src: files/projects.txt
      register: projects_file

    - name: Extrair lista de projetos
      set_fact:
        projects: "{{ projects_file['content'] | b64decode | splitlines() }}"

    - name: Criar diretório temporário
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

    - name: Verificar se bucket S3 existe
      shell: aws s3api head-bucket --bucket {{ s3_bucket }}
      register: s3_check
      failed_when: false
      changed_when: false

    - name: Criar bucket S3 se não existir
      shell: aws s3 mb s3://{{ s3_bucket }}
      when: s3_check.rc != 0

    - name: Obter token do ECR
      command: aws ecr get-login-password
      register: ecr_token
      changed_when: false

    - name: Criar Secret para acesso ao ECR no OpenShift
      shell: |
        oc create secret docker-registry {{ ecr_secret_name }} \
          --docker-server={{ ecr_url }} \
          --docker-username=AWS \
          --docker-password="{{ ecr_token.stdout }}" \
          --docker-email=no-reply@example.com \
          --dry-run=client -o yaml | oc apply -f -
      changed_when: true

    - name: Processar projetos
      vars:
        project: "{{ item }}"
      loop: "{{ projects }}"
      block:

        - name: Associar o secret à SA default do projeto {{ project }}
          shell: |
            oc patch serviceaccount default -n {{ project }} \
              -p '{"imagePullSecrets":[{"name":"{{ ecr_secret_name }}"}]}'
          changed_when: false
          ignore_errors: true

        - name: Criar diretório do projeto
          file:
            path: "{{ tmp_dir }}/{{ project }}"
            state: directory

        - name: Exportar imagens do ImageStream para o ECR
          shell: |
            for image in $(oc get is -n {{ project }} -o jsonpath='{.items[*].status.tags[*].items[*].dockerImageReference}'); do
              img_name=$(basename "$image")
              new_image="{{ ecr_url }}/{{ project }}/$img_name"
              echo "Copiando $image para $new_image"
              skopeo copy --src-tls-verify=false --dest-tls-verify=true docker://$image docker://$new_image
            done
          args:
            executable: /bin/bash

        - name: Exportar objetos OpenShift
          shell: |
            for kind in deployment configmap secret serviceaccount service route; do
              oc get $kind -n {{ project }} -o yaml > {{ tmp_dir }}/{{ project }}/$kind.yaml || true
            done
          args:
            executable: /bin/bash

        - name: Atualizar imagem dos deployments com ECR
          replace:
            path: "{{ tmp_dir }}/{{ project }}/deployment.yaml"
            regexp: 'image: .*/(.*)'
            replace: 'image: {{ ecr_url }}/{{ project }}/\1'
          when: lookup('file', tmp_dir + '/' + project + '/deployment.yaml', errors='ignore') != ''

        - name: Enviar arquivos para o S3
          shell: |
            aws s3 cp {{ tmp_dir }}/{{ project }} s3://{{ s3_bucket }}/{{ project }} --recursive
          args:
            executable: /bin/bash
